# vim: ft=sh 
#     ____  ____ ______________ 
#    / __ \/ __ `/ ___/ ___/ _ \
#   / /_/ / /_/ / /  (__  )  __/
#  / .___/\__,_/_/  /____/\___/ 
# /_/                           
#
_parse() {
  local cur prev opts base
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"

	commands="add configure default deploy develop download functions generate jssdk list logs migrate new releases rollback symbols triggers update version --help"

  # add         Adds a new Parse App to config in current Cloud Code directory
  # configure   Configure various Parse settings
  # default     Sets or gets the default Parse App
  # deploy      Deploys a Parse App
  # develop     Monitors for changes to code and deploys, also tails parse logs
  # download    Downloads the Cloud Code project
  # functions   List Cloud Code functions and function webhooks
  # generate    Generates a sample express app in the current project directory
  # jssdk       Sets the Parse JavaScript SDK version to use in Cloud Code
  # list        Lists properties of given Parse app and Parse apps associated with given project
  # logs        Prints out recent log messages
  # migrate     Migrate project config format to preferred format
  # new         Adds Cloud Code to an existing Parse app, additional can create a new Parse app
  # releases    Gets the releases for a Parse App
  # rollback    Rolls back the version for the given app
  # symbols     Uploads symbol files
  # triggers    List Cloud Code triggers and trigger webhooks
  # update      Updates this tool to the latest version
  # version     Gets the Command Line Tools version
	case "${prev}" in

    hooks )
      args="--help -b --base= -s --strict=" 
      # app=$(jq .applications._default.link .parse.local)
      COMPREPLY=( $(compgen -W "${args}" -- "${cur}") )
      return 0
      ;;

    accountkey )
      args="--help -d --default" 
      COMPREPLY=( $(compgen -W "${args}" -- "${cur}") )
      return 0
      ;;

    configure )
      args="accountkey email project hooks" 
      COMPREPLY=( $(compgen -W "${args}" -- "${cur}") )
      return 0
      ;;

    symbols )
      args="--help -t -a -m -p --aapt= --apk= --manifest= --path= " 
      COMPREPLY=( $(compgen -W "${args}" -- "${cur}") )
      return 0
      ;;

    triggers )
      args="--help create edit delete" 
      COMPREPLY=( $(compgen -W "${args}" -- "${cur}") )
      return 0
      ;;

    functions )
      args="--help create edit delete" 
      COMPREPLY=( $(compgen -W "${args}" -- "${cur}") )
      return 0
      ;;

    deploy )
      args="--help --description= -d -f --force= -n --retries= -v --verbose=" 
      COMPREPLY=( $(compgen -W "${args}" -- "${cur}") )
      return 0
      ;;

	esac
  
  # parse list-units |awk '{print $1}'|sed 1d

  COMPREPLY=($(compgen -W "${commands}" -- "${cur}"))
  return 0
}

complete -F _parse parse

